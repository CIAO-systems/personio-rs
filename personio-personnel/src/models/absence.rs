/*
 * Personnel Data
 *
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Absence {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    #[serde(rename = "start_date", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "end_date", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(rename = "days_count", skip_serializing_if = "Option::is_none")]
    pub days_count: Option<f64>,
    #[serde(rename = "half_day_start", skip_serializing_if = "Option::is_none")]
    pub half_day_start: Option<u8>, // should be bool, but https://github.com/personio/api-docs/issues/204
    #[serde(rename = "half_day_end", skip_serializing_if = "Option::is_none")]
    pub half_day_end: Option<u8>, // should be bool, but https://github.com/personio/api-docs/issues/204
    #[serde(rename = "time_off_type", skip_serializing_if = "Option::is_none")]
    pub time_off_type: Option<Box<models::AbsenceTimeOffType>>,
    #[serde(rename = "employee", skip_serializing_if = "Option::is_none")]
    pub employee: Option<Box<models::ShortEmployee>>,
    #[serde(rename = "certificate", skip_serializing_if = "Option::is_none")]
    pub certificate: Option<Box<models::HourlyAbsencePeriodResponseAttributesCertificate>>,
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// API if the origin is api, otherwise returns an admin employee's name who's account is used to create the absence
    #[serde(rename = "created_by", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<String>,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(flatten)]
    pub additional_properties: std::collections::HashMap<String, serde_json::Value>,
}

impl Absence {
    pub fn new() -> Absence {
        Absence {
            id: None,
            status: None,
            start_date: None,
            end_date: None,
            days_count: None,
            half_day_start: None,
            half_day_end: None,
            time_off_type: None,
            employee: None,
            certificate: None,
            created_at: None,
            created_by: None,
            updated_at: None,
            additional_properties: std::collections::HashMap::new(),
        }
    }
}

