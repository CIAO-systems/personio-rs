/*
 * Personnel Data
 *
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PublicReportItemsAttributesItemsInnerAttributesInner {
    #[serde(rename = "attribute_id", skip_serializing_if = "Option::is_none")]
    pub attribute_id: Option<String>,
    #[serde(rename = "data_type", skip_serializing_if = "Option::is_none")]
    pub data_type: Option<DataType>,
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
    #[serde(rename = "employee_id", skip_serializing_if = "Option::is_none")]
    pub employee_id: Option<i32>,
    #[serde(rename = "entity_id", skip_serializing_if = "Option::is_none")]
    pub entity_id: Option<String>,
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    #[serde(rename = "cost_centers", skip_serializing_if = "Option::is_none")]
    pub cost_centers: Option<Vec<models::CostCenter>>,
    #[serde(rename = "start_date", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    #[serde(rename = "end_date", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    #[serde(rename = "duration_days", skip_serializing_if = "Option::is_none")]
    pub duration_days: Option<String>,
    #[serde(rename = "duration_hours", skip_serializing_if = "Option::is_none")]
    pub duration_hours: Option<String>,
    #[serde(rename = "half_day_at_start", skip_serializing_if = "Option::is_none")]
    pub half_day_at_start: Option<bool>,
    #[serde(rename = "half_day_at_end", skip_serializing_if = "Option::is_none")]
    pub half_day_at_end: Option<bool>,
    #[serde(rename = "performance_targets", skip_serializing_if = "Option::is_none")]
    pub performance_targets: Option<Vec<models::PerformanceTarget>>,
    #[serde(rename = "performance_target_kpis", skip_serializing_if = "Option::is_none")]
    pub performance_target_kpis: Option<Vec<models::PerformanceTarget>>,
    #[serde(rename = "amount", skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    #[serde(rename = "currency_symbol", skip_serializing_if = "Option::is_none")]
    pub currency_symbol: Option<String>,
    #[serde(rename = "currency_code", skip_serializing_if = "Option::is_none")]
    pub currency_code: Option<String>,
    #[serde(rename = "overtime_hours", skip_serializing_if = "Option::is_none")]
    pub overtime_hours: Option<String>,
    #[serde(rename = "bonus_type", skip_serializing_if = "Option::is_none")]
    pub bonus_type: Option<String>,
}

impl PublicReportItemsAttributesItemsInnerAttributesInner {
    pub fn new() -> PublicReportItemsAttributesItemsInnerAttributesInner {
        PublicReportItemsAttributesItemsInnerAttributesInner {
            attribute_id: None,
            data_type: None,
            value: None,
            employee_id: None,
            entity_id: None,
            duration: None,
            cost_centers: None,
            start_date: None,
            end_date: None,
            duration_days: None,
            duration_hours: None,
            half_day_at_start: None,
            half_day_at_end: None,
            performance_targets: None,
            performance_target_kpis: None,
            amount: None,
            currency_symbol: None,
            currency_code: None,
            overtime_hours: None,
            bonus_type: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DataType {
    #[serde(rename = "COMPENSATION")]
    Compensation,
}

impl Default for DataType {
    fn default() -> DataType {
        Self::Compensation
    }
}

