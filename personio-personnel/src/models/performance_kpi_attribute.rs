/*
 * Personnel Data
 *
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PerformanceKpiAttribute {
    #[serde(rename = "attribute_id", skip_serializing_if = "Option::is_none")]
    pub attribute_id: Option<String>,
    #[serde(rename = "data_type", skip_serializing_if = "Option::is_none")]
    pub data_type: Option<DataType>,
    #[serde(rename = "employee_id", skip_serializing_if = "Option::is_none")]
    pub employee_id: Option<i32>,
    #[serde(rename = "performance_target_kpis", skip_serializing_if = "Option::is_none")]
    pub performance_target_kpis: Option<Vec<models::PerformanceTarget>>,
    #[serde(flatten)]
    pub additional_properties: std::collections::HashMap<String, serde_json::Value>,
}

impl PerformanceKpiAttribute {
    pub fn new() -> PerformanceKpiAttribute {
        PerformanceKpiAttribute {
            attribute_id: None,
            data_type: None,
            employee_id: None,
            performance_target_kpis: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DataType {
    #[serde(rename = "PERFORMANCE_KPI")]
    PerformanceKpi,
}

impl Default for DataType {
    fn default() -> DataType {
        Self::PerformanceKpi
    }
}

