/*
 * Personnel Data
 *
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct HourlyAbsencePeriodResponseAttributes {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "measurement_unit", skip_serializing_if = "Option::is_none")]
    pub measurement_unit: Option<MeasurementUnit>,
    /// Period effective duration in minutes
    #[serde(rename = "effective_duration")]
    pub effective_duration: i32,
    #[serde(rename = "employee")]
    pub employee: Box<models::ShortEmployee>,
    #[serde(rename = "absence_type_id")]
    pub absence_type_id: Box<models::AbsenceType>,
    #[serde(rename = "certificate")]
    pub certificate: Box<models::HourlyAbsencePeriodResponseAttributesCertificate>,
    #[serde(rename = "start")]
    pub start: String,
    #[serde(rename = "end", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub end: Option<Option<String>>,
    #[serde(rename = "half_day_start")]
    pub half_day_start: bool,
    #[serde(rename = "half_day_end")]
    pub half_day_end: bool,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "origin", deserialize_with = "Option::deserialize")]
    pub origin: Option<Origin>,
    #[serde(rename = "status")]
    pub status: String,
    /// ID of the employee who created the absence period.
    #[serde(rename = "created_by")]
    pub created_by: i32,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
    #[serde(rename = "approved_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub approved_at: Option<Option<String>>,
    /// Breakdowns of effective duration by day of absence.
    #[serde(rename = "breakdowns")]
    pub breakdowns: Vec<models::AbsencePeriodBreakdown>,
    #[serde(flatten)]
    pub additional_properties: std::collections::HashMap<String, serde_json::Value>,
}

impl HourlyAbsencePeriodResponseAttributes {
    pub fn new(id: String, effective_duration: i32, employee: models::ShortEmployee, absence_type_id: models::AbsenceType, certificate: models::HourlyAbsencePeriodResponseAttributesCertificate, start: String, half_day_start: bool, half_day_end: bool, origin: Option<Origin>, status: String, created_by: i32, created_at: String, updated_at: String, breakdowns: Vec<models::AbsencePeriodBreakdown>) -> HourlyAbsencePeriodResponseAttributes {
        HourlyAbsencePeriodResponseAttributes {
            id,
            measurement_unit: None,
            effective_duration,
            employee: Box::new(employee),
            absence_type_id: Box::new(absence_type_id),
            certificate: Box::new(certificate),
            start,
            end: None,
            half_day_start,
            half_day_end,
            comment: None,
            origin,
            status,
            created_by,
            created_at,
            updated_at,
            approved_at: None,
            breakdowns,
            additional_properties: std::collections::HashMap::new(),
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MeasurementUnit {
    #[serde(rename = "minutes")]
    Minutes,
}

impl Default for MeasurementUnit {
    fn default() -> MeasurementUnit {
        Self::Minutes
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Origin {
    #[serde(rename = "web")]
    Web,
    #[serde(rename = "api")]
    Api,
    #[serde(rename = "mobile")]
    Mobile,
    #[serde(rename = "slack")]
    Slack,
    #[serde(rename = "msteams")]
    Msteams,
}

impl Default for Origin {
    fn default() -> Origin {
        Self::Web
    }
}

