/*
 * Personnel Data
 *
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DocumentUploadSuccessResponseAllOfDataAttributes {
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    #[serde(rename = "date", skip_serializing_if = "Option::is_none")]
    pub date: Option<String>,
    #[serde(rename = "comment", skip_serializing_if = "Option::is_none")]
    pub comment: Option<String>,
    #[serde(rename = "employee", skip_serializing_if = "Option::is_none")]
    pub employee: Option<Box<models::DocumentEmployeeResponseObject>>,
    #[serde(rename = "category_id", skip_serializing_if = "Option::is_none")]
    pub category_id: Option<Box<models::DocumentCategory>>,
    #[serde(flatten)]
    pub additional_properties: std::collections::HashMap<String, serde_json::Value>,
}

impl DocumentUploadSuccessResponseAllOfDataAttributes {
    pub fn new() -> DocumentUploadSuccessResponseAllOfDataAttributes {
        DocumentUploadSuccessResponseAllOfDataAttributes {
            title: None,
            date: None,
            comment: None,
            employee: None,
            category_id: None,
            additional_properties: std::collections::HashMap::new(),
        }
    }
}

