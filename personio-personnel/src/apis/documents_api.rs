/*
 * Personnel Data
 *
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`company_document_categories_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CompanyDocumentCategoriesGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`company_documents_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CompanyDocumentsPostError {
    Status404(models::DocumentUploadFailedWithBadDocumentCategoryResponse),
    Status422(models::DocumentUploadFailedWithUnsupportedFileTypeResponse),
    UnknownValue(serde_json::Value),
}


/// This endpoint is responsible for fetching all document categories of the company. The result contains a list of document categories.
pub async fn company_document_categories_get(configuration: &configuration::Configuration, x_personio_partner_id: Option<&str>, x_personio_app_id: Option<&str>) -> Result<models::DocumentCategoriesResponse, Error<CompanyDocumentCategoriesGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_x_personio_partner_id = x_personio_partner_id;
    let p_x_personio_app_id = x_personio_app_id;

    let uri_str = format!("{}/company/document-categories", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_x_personio_partner_id {
        req_builder = req_builder.header("X-Personio-Partner-ID", param_value.to_string());
    }
    if let Some(param_value) = p_x_personio_app_id {
        req_builder = req_builder.header("X-Personio-App-ID", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DocumentCategoriesResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DocumentCategoriesResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CompanyDocumentCategoriesGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// This endpoint is responsible for uploading documents for the company employees. The Documents endpoint has a rate limit of 60 requests per minute. 
pub async fn company_documents_post(configuration: &configuration::Configuration, title: &str, employee_id: i32, category_id: i32, file: std::path::PathBuf, x_personio_partner_id: Option<&str>, x_personio_app_id: Option<&str>, comment: Option<&str>, date: Option<String>) -> Result<models::DocumentUploadSuccessResponse, Error<CompanyDocumentsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_title = title;
    let p_employee_id = employee_id;
    let p_category_id = category_id;
    let p_file = file;
    let p_x_personio_partner_id = x_personio_partner_id;
    let p_x_personio_app_id = x_personio_app_id;
    let p_comment = comment;
    let p_date = date;

    let uri_str = format!("{}/company/documents", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_x_personio_partner_id {
        req_builder = req_builder.header("X-Personio-Partner-ID", param_value.to_string());
    }
    if let Some(param_value) = p_x_personio_app_id {
        req_builder = req_builder.header("X-Personio-App-ID", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    let mut multipart_form = reqwest::multipart::Form::new();
    multipart_form = multipart_form.text("title", p_title.to_string());
    if let Some(param_value) = p_comment {
        multipart_form = multipart_form.text("comment", param_value.to_string());
    }
    multipart_form = multipart_form.text("employee_id", p_employee_id.to_string());
    multipart_form = multipart_form.text("category_id", p_category_id.to_string());
    if let Some(param_value) = p_date {
        multipart_form = multipart_form.text("date", param_value.to_string());
    }
    // TODO: support file upload for 'file' parameter
    req_builder = req_builder.multipart(multipart_form);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::DocumentUploadSuccessResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::DocumentUploadSuccessResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CompanyDocumentsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

