/*
 * Personnel Data
 *
 * API for reading and writing personnel data including data about attendances, absences, documents, etc
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;
use serde::{Deserialize, Serialize, de::Error as _};
use crate::{apis::ResponseContent, models};
use super::{Error, configuration, ContentType};


/// struct for typed errors of method [`company_attendances_projects_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CompanyAttendancesProjectsGetError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`company_attendances_projects_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CompanyAttendancesProjectsIdDeleteError {
    Status404(models::CompanyAttendancesProjectsIdDelete404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`company_attendances_projects_id_patch`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CompanyAttendancesProjectsIdPatchError {
    Status400(models::CompanyAttendancesProjectsIdPatch400Response),
    Status404(models::CompanyAttendancesProjectsIdDelete404Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`company_attendances_projects_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CompanyAttendancesProjectsPostError {
    Status400(models::CompanyAttendancesProjectsPost400Response),
    UnknownValue(serde_json::Value),
}


/// Provides a list of all company projects.
pub async fn company_attendances_projects_get(configuration: &configuration::Configuration, x_personio_partner_id: Option<&str>, x_personio_app_id: Option<&str>) -> Result<models::CompanyAttendancesProjectsGet200Response, Error<CompanyAttendancesProjectsGetError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_x_personio_partner_id = x_personio_partner_id;
    let p_x_personio_app_id = x_personio_app_id;

    let uri_str = format!("{}/company/attendances/projects", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_x_personio_partner_id {
        req_builder = req_builder.header("X-Personio-Partner-ID", param_value.to_string());
    }
    if let Some(param_value) = p_x_personio_app_id {
        req_builder = req_builder.header("X-Personio-App-ID", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CompanyAttendancesProjectsGet200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CompanyAttendancesProjectsGet200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CompanyAttendancesProjectsGetError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Deletes a project from the company account
pub async fn company_attendances_projects_id_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<CompanyAttendancesProjectsIdDeleteError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;

    let uri_str = format!("{}/company/attendances/projects/{id}", configuration.base_path, id=p_id);
    let mut req_builder = configuration.client.request(reqwest::Method::DELETE, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<CompanyAttendancesProjectsIdDeleteError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Updates a project with the given data
pub async fn company_attendances_projects_id_patch(configuration: &configuration::Configuration, id: i32, company_attendances_projects_id_patch_request: Option<models::CompanyAttendancesProjectsIdPatchRequest>) -> Result<models::CompanyAttendancesProjectsPost200Response, Error<CompanyAttendancesProjectsIdPatchError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;
    let p_company_attendances_projects_id_patch_request = company_attendances_projects_id_patch_request;

    let uri_str = format!("{}/company/attendances/projects/{id}", configuration.base_path, id=p_id);
    let mut req_builder = configuration.client.request(reqwest::Method::PATCH, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_company_attendances_projects_id_patch_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CompanyAttendancesProjectsPost200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CompanyAttendancesProjectsPost200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CompanyAttendancesProjectsIdPatchError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

/// Creates a project into the company account
pub async fn company_attendances_projects_post(configuration: &configuration::Configuration, x_personio_partner_id: Option<&str>, x_personio_app_id: Option<&str>, company_attendances_projects_post_request: Option<models::CompanyAttendancesProjectsPostRequest>) -> Result<models::CompanyAttendancesProjectsPost200Response, Error<CompanyAttendancesProjectsPostError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_x_personio_partner_id = x_personio_partner_id;
    let p_x_personio_app_id = x_personio_app_id;
    let p_company_attendances_projects_post_request = company_attendances_projects_post_request;

    let uri_str = format!("{}/company/attendances/projects", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::POST, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_x_personio_partner_id {
        req_builder = req_builder.header("X-Personio-Partner-ID", param_value.to_string());
    }
    if let Some(param_value) = p_x_personio_app_id {
        req_builder = req_builder.header("X-Personio-App-ID", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_company_attendances_projects_post_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::CompanyAttendancesProjectsPost200Response`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::CompanyAttendancesProjectsPost200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<CompanyAttendancesProjectsPostError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent { status, content, entity }))
    }
}

